/*
 * StockQuotes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Server.Attributes;
using Swashbuckle.AspNetCore.Annotations;

namespace Server.Controllers {
	/// <summary>
	/// </summary>
	[ApiController]
	public class FinancialStatementApiController : ControllerBase {
		/// <summary>
		/// </summary>
		/// <param name="id"></param>
		/// <param name="year">Default value is current year</param>
		/// <param name="quarter">Default value is current quarter</param>
		/// <response code="200">Success</response>
		[HttpGet("/api/statement/cash-flow")]
		[ValidateModelState]
		[SwaggerOperation("GetCashFlow")]
		public virtual IActionResult GetCashFlow(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] int? year,
			[FromQuery] int? quarter
		)
			=> throw
				//TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(200);
				new NotImplementedException();

		/// <summary>
		/// </summary>
		/// <param name="id"></param>
		/// <param name="year">Default value is current year</param>
		/// <param name="quarter">Default value is current quarter</param>
		/// <response code="200">Success</response>
		[HttpGet("/api/statement/dupond")]
		[ValidateModelState]
		[SwaggerOperation("GetDuPond")]
		public virtual IActionResult GetDuPond(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] int? year,
			[FromQuery] int? quarter
		)
			=> throw
				//TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(200);
				new NotImplementedException();

		/// <summary>
		/// </summary>
		/// <param name="id"></param>
		/// <param name="year">Default value is current year</param>
		/// <param name="quarter">Default value is current quarter</param>
		/// <response code="200">Success</response>
		[HttpGet("/api/statement/growth")]
		[ValidateModelState]
		[SwaggerOperation("GetGrowthAbility")]
		public virtual IActionResult GetGrowthAbility(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] int? year,
			[FromQuery] int? quarter
		)
			=> throw
				//TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(200);
				new NotImplementedException();

		/// <summary>
		/// </summary>
		/// <param name="id"></param>
		/// <param name="year">Default value is current year</param>
		/// <param name="quarter">Default value is current quarter</param>
		/// <response code="200">Success</response>
		[HttpGet("/api/statement/operation")]
		[ValidateModelState]
		[SwaggerOperation("GetOperationCapability")]
		public virtual IActionResult GetOperationCapability(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] int? year,
			[FromQuery] int? quarter
		)
			=> throw
				//TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(200);
				new NotImplementedException();

		/// <summary>
		/// </summary>
		/// <param name="id"></param>
		/// <param name="beginDate"></param>
		/// <param name="endDate"></param>
		/// <response code="200">Success</response>
		[HttpGet("/api/statement/forcast")]
		[ValidateModelState]
		[SwaggerOperation("GetPerformanceForcast")]
		public virtual IActionResult GetPerformanceForcast(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] DateTime? beginDate,
			[FromQuery] DateTime? endDate
		)
			=> throw
				//TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(200);
				new NotImplementedException();

		/// <summary>
		/// </summary>
		/// <param name="id"></param>
		/// <param name="beginDate"></param>
		/// <param name="endDate"></param>
		/// <response code="200">Success</response>
		[HttpGet("/api/statement/report")]
		[ValidateModelState]
		[SwaggerOperation("GetPerformanceReport")]
		public virtual IActionResult GetPerformanceReport(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] DateTime? beginDate,
			[FromQuery] DateTime? endDate
		)
			=> throw
				//TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(200);
				new NotImplementedException();

		/// <summary>
		/// </summary>
		/// <param name="id"></param>
		/// <param name="year">Default value is current year</param>
		/// <param name="quarter">Default value is current quarter</param>
		/// <response code="200">Success</response>
		[HttpGet("/api/statement/profit")]
		[ValidateModelState]
		[SwaggerOperation("GetProfitability")]
		public virtual IActionResult GetProfitability(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] int? year,
			[FromQuery] int? quarter
		)
			=> throw
				//TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(200);
				new NotImplementedException();

		/// <summary>
		/// </summary>
		/// <param name="id"></param>
		/// <param name="year">Default value is current year</param>
		/// <param name="quarter">Default value is current quarter</param>
		/// <response code="200">Success</response>
		[HttpGet("/api/statement/balance")]
		[ValidateModelState]
		[SwaggerOperation("GetSolvency")]
		public virtual IActionResult GetSolvency(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] int? year,
			[FromQuery] int? quarter
		)
			=> throw
				//TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(200);
				new NotImplementedException();
	}
}