/*
 * StockQuotes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Server.Attributes;
using Server.Models;
using Swashbuckle.AspNetCore.Annotations;

namespace Server.Controllers {
	/// <summary>
	/// </summary>
	[ApiController]
	public class QuoteApiController : ControllerBase {
		/// <summary>
		/// </summary>
		/// <param name="fetcher"></param>
		public QuoteApiController(Process fetcher) => Fetcher = fetcher;

		/// <summary>
		/// </summary>
		public Process Fetcher { get; }

		/// <summary>
		/// </summary>
		/// <param name="date"></param>
		/// <returns></returns>
		[HttpGet("/api/quote/trade-status")]
		[ValidateModelState]
		[SwaggerOperation("CheckTradeStatus")]
		[SwaggerResponse(200, type: typeof(bool), description: "Trading status checked successfully")]
		public virtual IActionResult CheckTradeStatus([FromQuery] DateTime? date) {
			lock (Fetcher) {
				var command = "checkTradeStatus";
				if (date.HasValue)
					command += $" {date:yyyy-MM-dd}";
				Fetcher.StandardInput.WriteLine(command);
				var raw = Fetcher.StandardOutput.ReadLine();
				return Ok(JsonConvert.DeserializeObject<bool>(raw));
			}
		}

		/// <summary>
		/// </summary>
		/// <remarks>Get the price summary of a stock</remarks>
		/// <param name="id"></param>
		/// <param name="begin"></param>
		/// <param name="end"></param>
		/// <param name="rehabilitation">Rehabilitation status, default value is \&quot;none\&quot;</param>
		/// <response code="200">Get the quote of a stock every trading day</response>
		/// <response code="400">Invalid parameters or payload</response>
		/// <response code="500">Unknown error on server</response>
		[HttpGet("/api/quote/history/day")]
		[ValidateModelState]
		[SwaggerOperation("GetDailyPrice")]
		[SwaggerResponse(200, type: typeof(List<DailyPrice>), description: "Get the quote of a stock every trading day")]
		public virtual IActionResult GetDailyPrice(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] DateTime? begin,
			[FromQuery] DateTime? end,
			[FromQuery] string rehabilitation
		) {
			DailyPrice[] result;
			end ??= DateTime.Now;
			lock (Fetcher) {
				Fetcher.StandardInput.WriteLine($"getDailyPrice {id} {begin ?? end - TimeSpan.FromDays(30):yyyy-MM-dd} {end:yyyy-MM-dd} {rehabilitation ?? "none"}");
				var raw = Fetcher.StandardOutput.ReadLine();
				result = JsonConvert.DeserializeObject<DailyPrice[]>(raw);
			}
			return Ok(result);
		}

		/// <summary>
		/// </summary>
		/// <remarks>Get the price summary of a stock</remarks>
		/// <param name="id"></param>
		/// <param name="beginDate"></param>
		/// <param name="endDate"></param>
		/// <param name="frequency">Frequency of the quotes</param>
		/// <param name="rehabilitation">Rehabilitation status, default value is \&quot;none\&quot;</param>
		/// <response code="200">Get the quote of a stock every several minutes</response>
		/// <response code="400">Invalid parameters or payload</response>
		/// <response code="500">Unknown error on server</response>
		[HttpGet("/api/quote/history/minute")]
		[ValidateModelState]
		[SwaggerOperation("GetMinutelyPrice")]
		[SwaggerResponse(200, type: typeof(List<MinutelyPrice>), description: "Get the quote of a stock every several minutes")]
		public virtual IActionResult GetMinutelyPrice(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] DateTime? beginDate,
			[FromQuery] DateTime? endDate,
			[FromQuery] int? frequency,
			[FromQuery] string rehabilitation
		) {
			MinutelyPrice[] result;
			var now = DateTime.Now;
			lock (Fetcher) {
				Fetcher.StandardInput.WriteLine($"getDailyPrice {id} {beginDate ?? now - TimeSpan.FromDays(7):yyyy-MM-dd} {endDate ?? now:yyyy-MM-dd} {frequency ?? 60} {rehabilitation ?? "none"}");
				var raw = Fetcher.StandardOutput.ReadLine();
				result = JsonConvert.DeserializeObject<MinutelyPrice[]>(raw);
			}
			return Ok(result);
		}

		/// <summary>
		/// </summary>
		/// <remarks>Get the price summary of a stock</remarks>
		/// <param name="id"></param>
		/// <param name="begin"></param>
		/// <param name="end"></param>
		/// <param name="frequency">Frequency of the quotes</param>
		/// <param name="rehabilitation">Rehabilitation status, default value is \&quot;none\&quot;</param>
		/// <response code="200">Get the quote of a stock every week or month</response>
		/// <response code="400">Invalid parameters or payload</response>
		/// <response code="500">Unknown error on server</response>
		[HttpGet("/api/quote/history/week")]
		[ValidateModelState]
		[SwaggerOperation("GetWeeklyPrice")]
		[SwaggerResponse(200, type: typeof(List<WeeklyPrice>), description: "Get the quote of a stock every week or month")]
		public virtual IActionResult GetWeeklyPrice(
			[FromQuery] [Required] [RegularExpression(@"[a-zA-Z]{2}\.\d{6}")]
			string id,
			[FromQuery] DateTime? begin,
			[FromQuery] DateTime? end,
			[FromQuery] string frequency,
			[FromQuery] string rehabilitation
		) {
			WeeklyPrice[] result;
			var now = DateTime.Now;
			lock (Fetcher) {
				Fetcher.StandardInput.WriteLine($"getWeeklyPrice {id} {begin ?? now - TimeSpan.FromDays(60):yyyy-MM-dd} {end ?? now:yyyy-MM-dd} {frequency ?? "week"} {rehabilitation ?? "none"}");
				var raw = Fetcher.StandardOutput.ReadLine();
				result = JsonConvert.DeserializeObject<WeeklyPrice[]>(raw);
			}
			return Ok(result);
		}
	}
}