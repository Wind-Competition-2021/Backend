/*
 * StockQuote
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Server.Models
{ 
    /// <summary>
    /// Used in candlestick chart, prices are multiplied by 10000
    /// </summary>
    [DataContract]
    public partial class PriceSummary : IEquatable<PriceSummary>
    { 
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Opening
        /// </summary>
        [DataMember(Name="opening")]
        public int? Opening { get; set; }

        /// <summary>
        /// Gets or Sets Closing
        /// </summary>
        [DataMember(Name="closing")]
        public int? Closing { get; set; }

        /// <summary>
        /// Gets or Sets Highest
        /// </summary>
        [DataMember(Name="highest")]
        public int? Highest { get; set; }

        /// <summary>
        /// Gets or Sets Lowest
        /// </summary>
        [DataMember(Name="lowest")]
        public int? Lowest { get; set; }

        /// <summary>
        /// Gets or Sets Average5
        /// </summary>
        [DataMember(Name="average5")]
        public int? Average5 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceSummary {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Opening: ").Append(Opening).Append("\n");
            sb.Append("  Closing: ").Append(Closing).Append("\n");
            sb.Append("  Highest: ").Append(Highest).Append("\n");
            sb.Append("  Lowest: ").Append(Lowest).Append("\n");
            sb.Append("  Average5: ").Append(Average5).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PriceSummary)obj);
        }

        /// <summary>
        /// Returns true if PriceSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of PriceSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceSummary other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Opening == other.Opening ||
                    Opening != null &&
                    Opening.Equals(other.Opening)
                ) && 
                (
                    Closing == other.Closing ||
                    Closing != null &&
                    Closing.Equals(other.Closing)
                ) && 
                (
                    Highest == other.Highest ||
                    Highest != null &&
                    Highest.Equals(other.Highest)
                ) && 
                (
                    Lowest == other.Lowest ||
                    Lowest != null &&
                    Lowest.Equals(other.Lowest)
                ) && 
                (
                    Average5 == other.Average5 ||
                    Average5 != null &&
                    Average5.Equals(other.Average5)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Opening != null)
                    hashCode = hashCode * 59 + Opening.GetHashCode();
                    if (Closing != null)
                    hashCode = hashCode * 59 + Closing.GetHashCode();
                    if (Highest != null)
                    hashCode = hashCode * 59 + Highest.GetHashCode();
                    if (Lowest != null)
                    hashCode = hashCode * 59 + Lowest.GetHashCode();
                    if (Average5 != null)
                    hashCode = hashCode * 59 + Average5.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PriceSummary left, PriceSummary right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PriceSummary left, PriceSummary right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
